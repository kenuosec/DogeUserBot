from asyncio import sleep
from datetime import datetime
from time import time

from . import StartTime, doge, eor, get_readable_time, mention

plugin_category = "bot"


@doge.bot_cmd(
    pattern="ping(a|f|$)",
    command=("ping", plugin_category),
    info={
        "header": "Check how long it takes to ping doge!",
        "flags": {"a": "average ping", "f": "with animation"},
        "usage": ["{tr}ping", "{tr}pinga", "{tr}pingf"],
    },
)
async def _(event):
    "To check ping"
    flag = event.pattern_match.group(1)
    if flag == "a":
        start = datetime.now()
        dogevent = await eor(event, "!....")
        await sleep(0.3)
        await dogevent.edit("..!..")
        await sleep(0.3)
        await dogevent.edit("....!")
        end = datetime.now()
        tms = (end - start).microseconds / 1000
        ms = round((tms - 0.6) / 3, 3)
        uptime = await get_readable_time((time() - StartTime))
        await dogevent.edit(
            f"**█▀█ █▀█ █▄░█ █▀▀ █\n\
█▀▀ █▄█ █░▀█ █▄█ ▄\n\
\n\
┏━━━━━━━━━━━━━━\n\
  🐾 {ms} avarege ms\n\
  🦴 {uptime}\n\
┗━━━━━━━━━━━━━━\n\
┏━━━━━━━━━━━━━━\n\
  ◽ Doɢᴇ oғ {mention}\n\
┗━━━━━━━━━━━━━━**",
        )
    elif flag == "f":
        start = datetime.now()
        dogevent = await eor(event, "⬛⬛⬛⬛⬛⬛⬛⬛⬛")
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        uptime = await get_readable_time((time() - StartTime))
        animation_chars = [
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛ ",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛ ",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛‎📶⬛⬛⬛‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛‎📶⬛⬛⬛‎📶⬛\n\
⬛⬛‎📶‎📶⬛⬛‎📶⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛‎📶⬛⬛⬛‎📶⬛\n\
⬛⬛‎📶‎📶⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛‎📶⬛⬛⬛‎📶⬛\n\
⬛⬛‎📶‎📶⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛‎📶‎📶‎📶‎📶‎📶⬛",
            "⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛‎📶⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛‎📶‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛‎📶⬛⬛⬛\n\
⬛⬛⬛⬛‎📶⬛⬛⬛⬛\n\
⬛‎📶‎📶‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛‎📶‎📶‎📶‎📶‎📶⬛⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛⬛⬛⬛⬛‎📶⬛\n\
⬛‎📶⬛‎📶⬛⬛⬛‎📶⬛\n\
⬛⬛‎📶‎📶⬛⬛‎📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛‎📶⬛‎📶‎📶‎📶‎📶‎📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛",
        ]
        for i in range(24):
            await sleep(0.3)
            await dogevent.edit(animation_chars[i % 24])
        await dogevent.edit(
            f"⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛📶📶📶📶📶📶📶⬛\n\
⬛⬛⬛⬛📶⬛⬛📶⬛\n\
⬛⬛⬛⬛📶⬛⬛📶⬛\n\
⬛⬛⬛⬛📶⬛⬛📶⬛\n\
⬛⬛⬛⬛⬛📶📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛📶📶📶📶📶⬛⬛\n\
⬛📶⬛⬛⬛⬛⬛📶⬛\n\
⬛📶⬛⬛⬛⬛⬛📶⬛\n\
⬛📶⬛⬛⬛⬛⬛📶⬛\n\
⬛⬛📶📶📶📶📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛📶📶📶📶📶📶📶⬛\n\
⬛⬛⬛⬛⬛⬛📶⬛⬛\n\
⬛⬛⬛⬛⬛📶⬛⬛⬛\n\
⬛⬛⬛⬛📶⬛⬛⬛⬛\n\
⬛📶📶📶📶📶📶📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛⬛📶📶📶📶📶⬛⬛\n\
⬛📶⬛⬛⬛⬛⬛📶⬛\n\
⬛📶⬛⬛⬛⬛⬛📶⬛\n\
⬛📶⬛📶⬛⬛⬛📶⬛\n\
⬛⬛📶📶⬛⬛📶⬛⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
⬛📶⬛📶📶📶📶📶⬛\n\
⬛⬛⬛⬛⬛⬛⬛⬛⬛\n\
‎‎‎‎‎‎‎‎‎\n\
**🐾 {ms} ms\n\
🦴 {uptime}\n\
◽ Doɢᴇ oғ {mention}**",
        )
    else:
        start = datetime.now()
        dogevent = await eor(event, "🐶 Pong!")
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        uptime = await get_readable_time((time() - StartTime))
        await dogevent.edit(
            f"\
**█▀█ █▀█ █▄░█ █▀▀ █\n\
█▀▀ █▄█ █░▀█ █▄█ ▄\n\
\n\
┏━━━━━━━━━━━━━━\n\
  🐾 {ms} ms\n\
  🦴 {uptime}\n\
┗━━━━━━━━━━━━━━\n\
┏━━━━━━━━━━━━━━\n\
  ◽ Doɢᴇ oғ {mention}\n\
┗━━━━━━━━━━━━━━**",
        )
